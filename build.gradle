plugins {
    id 'java'
    id 'application'
    id 'eclipse'
    id 'maven-publish'
    id 'signing'
    id 'idea'
//    id 'checkstyle'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = "com.github.tsantalis"
version = project.hasProperty('buildVersion') ?
        project.buildVersion
        : '3.0.9'

applicationName = rootProject.name
mainClassName = "org.refactoringminer.RefactoringMiner"

idea {
    module {
        excludeDirs.add(file("src-test/data/astDiff/"))
        excludeDirs.add(file("tmp"))
    }
}

//checkstyle {
//    toolVersion = '8.36'
//    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
//    configProperties = [suppressionFile: "${rootProject.file('config/checkstyle/checkstyle_supressions.xml')}"]
//    ignoreFailures = false
//    showViolations = true
//}

repositories {
    mavenCentral()
}

test {
    useJUnitPlatform()
    afterTest { descriptor, result ->
        if (result.resultType == TestResult.ResultType.FAILURE) {
            println "\n$descriptor.className [$descriptor.classDisplayName] > $descriptor.name [$descriptor.displayName]: $result.resultType"
        }
    }
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    jvmArgs '-Xmx4096M', '-Xms1024M' /* In case of heap-space error*/
    if (project.hasProperty('notoken')) {
        exclude '**/GHRepositoryWrapperTest.*'
        exclude '**/TestCommandLine.*'
        print 'Skipping tests that require a GitHub token'
    }
}

dependencies {
    implementation 'org.eclipse.jgit:org.eclipse.jgit:6.10.0.202406032230-r'
    implementation 'org.slf4j:slf4j-api:2.0.16'
    implementation 'org.slf4j:slf4j-simple:2.0.16'
    implementation 'org.eclipse.jdt:org.eclipse.jdt.core:3.38.0'
    implementation 'org.apache.commons:commons-text:1.12.0'
    implementation 'org.kohsuke:github-api:1.135'
    implementation 'io.github.java-diff-utils:java-diff-utils:4.12'
	implementation 'com.github.gumtreediff:core:3.0.0'
	implementation 'com.github.gumtreediff:gen.jdt:3.0.0'
    implementation 'org.jcommander:jcommander:1.83'
    implementation 'org.jsoup:jsoup:1.18.1'
    implementation 'com.google.code.gson:gson:2.8.9' // 确保使用最新版本
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testImplementation 'net.joshka:junit-json-params:5.9.2-r0'
    testImplementation 'org.skyscreamer:jsonassert:1.5.1'
    testImplementation 'org.glassfish:javax.json:1.1.4'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    implementation 'it.unimi.dsi:fastutil:8.5.14'
    implementation 'com.sparkjava:spark-core:2.9.4'
    implementation('org.rendersnake:rendersnake:1.9.0') {
        exclude group: 'javax.servlet', module: 'servlet-api'
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

artifacts {
    archives javadocJar, sourcesJar
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

publishing {
    repositories {
        maven {
            def releaseRepo = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo : snapshotRepo
            credentials {
                username = project.hasProperty('ossrhUsername') ? ossrhUsername : "Unknown user"
                password = project.hasProperty('ossrhPassword') ? ossrhPassword : "Unknown password"
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'refactoring-miner'
            from components.java

            pom {
                name = "Refactoring Miner"
                description = 'RefactoringMiner is a library/API written in Java that can detect refactorings applied in the history of a Java project.'
                url = 'https://github.com/tsantalis/RefactoringMiner'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'tsantalis'
                        name = 'Nikolaos Tsantalis'
                        email = 'tsantalis@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:tsantalis/RefactoringMiner.git'
                    developerConnection = 'scm:git:git@github.com:tsantalis/RefactoringMiner.git'
                    url = 'https://github.com/tsantalis/RefactoringMiner/tree/master'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

def jarName = project.hasProperty('jarName') ? project.jarName : 'RM-fat.jar'
shadowJar {
    manifest {
        attributes 'Main-Class': 'org.refactoringminer.RefactoringMiner'
    }
    archiveFileName = jarName
}
